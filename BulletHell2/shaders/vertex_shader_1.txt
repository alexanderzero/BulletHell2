#version 150

in vec3 position;
in vec3 color;
in vec2 tex_in;

out vec3 vcol;
out vec2 tex_out;

uniform vec2 uCameraSize;
uniform float x_position;
uniform float y_position;
uniform float width;
uniform float height;
uniform int   flip_horizontal;
uniform int   flip_vertical;
uniform vec2  rotation_vector; //the first line of the rotation matrix

void main(void) {
    vcol = color;

	vec3 temp_pos = position;

	//flipping the image
	if(flip_horizontal == 1)
	{
		temp_pos.x *= -1;
		temp_pos.x += 1;
	}
	if(flip_vertical == 1)
	{
		temp_pos.y *= -1;
		temp_pos.y += 1;
	}

	//scale
	temp_pos.x *= width;
	temp_pos.y *= height;

	//rotation
	float x_rotated = dot(rotation_vector, temp_pos.xy);
	float y_rotated = dot(vec2(-rotation_vector.y, rotation_vector.x),temp_pos.xy);
	temp_pos.xy = vec2(x_rotated, y_rotated);

	//position
	temp_pos.x += x_position;
	temp_pos.y += y_position;

	vec2 xFrmCamera = temp_pos.xy * 2; //NDC space is -1 to 1, multiply by two (because we're 0 to cameraSize)
	xFrmCamera /= uCameraSize; //scale to (0 to 2)
	xFrmCamera -= vec2(1.0, 1.0); //rebase to (-1 to 1)
	
    gl_Position = vec4(xFrmCamera, temp_pos.z, 1.0);

    tex_out = tex_in;
}